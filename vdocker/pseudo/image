
Image {
	filepath path
	id string	// manidest.config
	tag: List<String>,	// manifest.repotags
    layers: List<Layer>,	// manifest.layers
    metadata: Dictionary<String, String> // (manifest.id).json {"architecture", "config", "exposed_ports"}...
}

Layer{
	id string
	parent Layer
	created date
	state: Tree<DirEntry>,
	metadata: Dictionary<String, String>	// id, parent, created, container_config
}

// At this point it's assumed input data is validated
function Build(instructionsFilepath, tagName):
	// Build context - collection of steps, which defined by instructions
    buildContext = createBuildContext(instructionsFilepath)

	// Dummy creation of image object with tag name
    image = createImage(tagName)

    // Make the structure of files defined by instructions
    for each file in buildContext:
		switch file.type:
			case isDirectory:
				addDirectoryToImage(file, image)	// Recursive call of addFile
			case isFile:
				addFileToImage(file, image)

    // Make our layered representation by executing commands from build context
    executeBuildProcess(buildContext, image)


// ---------------

function createBuildContext(instructionsFilepath):
    buildContext = emptyBuildContext()

	// Dockerfile is an example of instructions filepath
    instructions = readInstructionsFile(instructionsFilepath)

    for each instruction in instructions:
        switch instruction.type:
            case isCopy:
                source, destination = extractCopyArguments(instruction)
                buildContext.addFile(source, destination)

            case isAdd:
                source, destination = extractAddArguments(instruction)
                buildContext.addFile(source, destination)

            case isWorkdir:
                directory = extractWorkdirArgument(instruction)
                buildContext.addDirectory(directory)

			case ...

    return buildContext

// ----------------

function executeBuildProcess(buildContext, image):
	for each command in buildContext:
		switch instruction.type:
			case isCopy:
				copyFiles(instruction.source, instruction.destination, buildContext, image)
			case isRun:
				executeCommand(instruction.command, image)
			case isEnv:
				addMetaData(instructuon.argument, image)
			case ...
		
		commitTopLayer(image)


// ---------------

function commitTopLayer(image):
	layer = image.Layers.last
	layerPath = image.path + "/" + layer.hash 
	mkdir(layerPath)
	saveFile(layerPath + "json", json.marshall(layer))
	saveFile(layerPath + "VERSION")
	saveFile(image.path, layer.state, execute("tar -cf layer.tar"))


// -----------------

function saveImage(image):
	saveFile(image.path + "/manifest.json", json.marshall("Config": image.hash, , "RepoTags": image.tag, "Layers": marshall(inage.layers.hash)))
	saveFile(image.path + "/{image.hash}.json", json.marshall(image.metadata))
	execute("tar -czf {image.path}.tar.gz")